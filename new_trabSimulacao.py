# -*- coding: utf-8 -*-
"""trabSimulacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ha-n9OE7WEfsYeEkUKceIiahgD1-KPON

# Trabalho de Simulação MAB-515
## Grupo:


*   **Alexandre Moreira**
*   **Daniel Atkinson**
*   **Rennan Gaio**
"""

import numpy as np
import matplotlib.pyplot as plt
import time
from scipy import stats
import math
import random
import sys

#TODO
# def buscaBinaria(vet, num):
# 	esquerda, direita = 0, len(vet)
# 	while 1:
#         # o // faz a divizao inteira dos numeros, arredondando para cima
# 		meio = (esquerda + direita) // 2
# 		aux_num = vet[meio]
#
# 		if num == aux_num:
# 			return meio
# 		elif num > aux_num:
#             if esquerda == meio:
#                 return direita
# 			esquerda = meio
# 		else:
#             if direita == meio:
#                 return meio
# 			direita = meio

######################################


class Evento:
    #evento == 0 indica chegada à fila
    #evento == 1 indica começo de serviço
    #evento == 2 indica término de serviço
    def __init__(self, tipo_de_evento, fregues, tempo, rodada):
        self.tipo_de_evento=tipo_de_evento
        self.tempo_evento = tempo
        self.fregues = fregues
        self.rodada = rodada

class Fregues:
    #rodada é uma variável que nos indicará em qual rodada o freguês chegou na fila
    #rodada == -1 indica que freguês entrou no sistema na fase transiente
    def __init__(self, rodada):
        #variáveis que indicam marcos no tempo
        self.tempo_chegada = 0.0
        self.tempo_comeco_servico = 0.0
        self.tempo_termino_servico = 0.0
        self.rodada_fregues = rodada

    def tempoEmEspera(self):
        return self.tempo_comeco_servico - self.tempo_chegada

    def tempoEmServico(self):
        return self.tempo_termino_servico - self.tempo_comeco_servico

    def tempoTotal(self):
        return self.tempo_termino_servico - self.tempo_chegada

class Simulador:

    def __init__(self, lamb, mi, k, n_rodadas, tipo_fila):
        #variaveis do Simulador

        #flag que indica se ainda estamos na fase transiente
        self.is_transiente = True

        self.tx_chegada = lamb
        self.tx_servico = mi

        #quantidade minima de coletas por rodada
        self.min_k = k

        #numero de rodadas que o simulador deve executar
        self.n_rodadas = n_rodadas

        #FCFS ou LCFS
        self.tipo_fila = tipo_fila

        self.tempo = 0.0

        #self.total_clientes = 0
        self.servidor_ocupado = False
        #-1 pois sera a fase transiente
        self.rodada_atual = -1

        #variável que irá guardar a área a cada chegada à fila e a cada entrada em serviço
        #nos eventos de interesse
        self.area = 0

        #listas do Simulador
        #lista de eventos que vai comandar a ordem em que acontecem as chegadas e saidas
        self.lista_de_eventos = []
        #self.fila = deque()

        #fila da MM1, que terao clientes esperando para serem atendidos
        self.fila_de_fregueses = []

        #self.debug = False

        #lista para salvar dados dos clientes para a geracao de graficos
        self.todos_fregueses_atendidos = []

        self.W_barra_por_rodada = []
        self.Nq_barra_por_rodada = []
        self.fregueses_atendidos_rodada = []

    def simulaTempoExponencial(self, taxa):
        r = random.random()
        # podemos utilizar dessa forma optimizada, pois tanto 1-r, quanto r sao numeros aleatorios de 0 a 1, dessa forma,
        # economizamos 1 operacao de subtracao por numero gerado
        tempo = -math.log(r)/taxa
        return tempo

    def inserirEventoEmOrdem(self, evento):
        self.lista_de_eventos.append(evento)
        #essa incersao pode ser optimizada usando busca binaria
        self.lista_de_eventos = sorted(self.lista_de_eventos, key=lambda evento: evento.tempo_evento)

    def geraEventoChegada(self, fregues):
        tempo_evento = self.tempo + self.simulaTempoExponencial(self.tx_chegada)
        return Evento("evento_chegada", fregues, tempo_evento, self.rodada_atual)

    def geraEventoSaida(self, fregues):
        tempo_evento = self.tempo + self.simulaTempoExponencial(self.tx_servico)
        return Evento("evento_saida", fregues, tempo_evento, self.rodada_atual)


    def testeFaseTransiente(self):
        #percentil da T-student para mais de 120 amostras
        percentil = 1.645
        #qtd de amostras
        n = len(self.fregueses_atendidos_rodada)
        #média amostral
        tempos_de_fila = [fregues.tempoEmEspera() for fregues in self.fregueses_atendidos_rodada]
        mean = np.sum(tempos_de_fila)/n
        #variancia amostral = SUM((Media - Media Amostral)^2) = S^2
        s = math.sqrt(np.sum( [(float(element) - float(mean))**2 for element in tempos_de_fila] ) / (n-1.0))
        #calculo do Intervalo de Confiança pela T-student
        lower = mean - (percentil*(s/math.sqrt(n)))
        upper = mean + (percentil*(s/math.sqrt(n)))
        center = lower + (upper - lower)/2
        if center/10 < (upper - lower):
            self.is_transiente=False



    def iniciaProcesso(self):
        #cria o primeiro evento de chegada para dar inicio ao simulador
        self.inserirEventoEmOrdem(self.geraEventoChegada(Fregues(self.rodada_atual)))

        while self.rodada_atual <= self.n_rodadas:
            #print self.lista_de_eventos
            #funcao pop(0) retira o primeiro elemento da lista, que e o proximo evento que ira acontecer em ordem cronologica
            evento_atual = self.lista_de_eventos.pop(0)

            #print evento_atual.tipo_de_evento

            #testa para ver o tipo de evento que esta sendo tratado
            if evento_atual.tipo_de_evento == "evento_chegada":
                #atualiza o tempo global para o tempo em que o evento esta acontecendo
                self.tempo = evento_atual.tempo_evento

                #a classe fregues recebe seu tempo de chegada de acordo com o tempo do Evento que ocasionou a criacao desse fregues
                evento_atual.fregues.tempo_chegada = self.tempo

                #adiciona o fregues a fila da MM1
                self.fila_de_fregueses.append(evento_atual.fregues)

                #cria uma nova chegada de fregues
                self.inserirEventoEmOrdem(self.geraEventoChegada(Fregues(self.rodada_atual)))

            #se o evento nao e de entrada, entao ele e de saida
            elif evento_atual.tipo_de_evento == "evento_saida":
                #atualiza o tempo global para o tempo em que o evento esta acontecendo
                self.tempo = evento_atual.tempo_evento

                #a classe fregues recebe seu tempo de saida de acordo com o tempo do Evento que ocasionou a saida desse fregues
                evento_atual.fregues.tempo_termino_servico = self.tempo

                # servidor nao esta mais ocupado
                self.servidor_ocupado = False

                # adicionando a lista de clientes atendidos
                self.todos_fregueses_atendidos.append(evento_atual.fregues)

                # adicionando a lista de clientes atendidos nesta rodada
                self.fregueses_atendidos_rodada.append(evento_atual.fregues)

            if len(self.fila_de_fregueses) != 0 and not self.servidor_ocupado:
                #Se FCFS, eu irei tirar da fila de fregueses o fregues que entrou a mais tempo, o fregues da esquerda
                if self.tipo_fila == "FCFS":
                    fregues = self.fila_de_fregueses.pop(0)
                #Se LCFS, eu irei tirar da fila de fregueses o fregues que entrou a menos tempo, o fregues da direita
                elif self.tipo_fila == "LCFS":
                    fregues = self.fila_de_fregueses.pop()

                #atualiza o tempo em que o fregues entrou em servico
                fregues.tempo_comeco_servico = self.tempo
                #gera o evento de saida que essa entrada em servico ira ocasionar
                self.inserirEventoEmOrdem(self.geraEventoSaida(fregues))

                #servidor passa a estar ocupado
                self.servidor_ocupado = True


            if len(self.fregueses_atendidos_rodada) >= self.min_k:
                if self.is_transiente:
                    self.testeFaseTransiente()
                    print "fase transiente"
                    print self.is_transiente
                else:
                    #gera metricas e estatisticas

                    # limpando os clientes atendidos nesta rodada
                    self.fregueses_atendidos_rodada = []

                    # proxima rodada
                    #print 'Termino da rodada #%d' % self.rodada
                    self.rodada_atual += 1





if __name__ == '__main__':
    vetor_lamb = [0.2, 0.4, 0.6, 0.8, 0.9]
    mi = 1
    kmins = [100, 150, 200]
    n_rodadas = 3200
    n_tipos_fila = ["FCFS", "LCFS"]
    IC = 0.95
    precisao = 0.05

    for tipo_fila in n_tipos_fila:
        for k in kmins:
            for lamb in vetor_lamb:

                #self, tx_chegada: float, tx_servico: float, k: int, n: int, tipo_fila: int, IC: float, precisao: float, utilizacao: float):
                simulador = Simulador(lamb, mi, k, n_rodadas, tipo_fila)
                simulador.iniciaProcesso()

                #testando qualquer variavel para ver a corretude do simulador
                freg = simulador.todos_fregueses_atendidos
                print freg

                #break
